#!/usr/bin/python3
# -*- coding: utf-8 -*-

import pyModbusTCP.client
import paho.mqtt.client
import threading
import logging
import signal
import time
import sys
import os


# modbus tcp server
MODBUS_HOST = '192.168.100.100'
MODBUS_PORT = 502

# mqtt broker
MQTT_HOST = 'mosquitto'
MQTT_PORT = 1883

# bypass / heater temperature diff
TEMP_DIFF = 2


state = {
    'status': False,           # (RO) connection status: ONLINE, OFFLINE
    'manual': None,            # (RW) manual mode: ON, OFF
    'bypass': {
        'relay': None,         # (RO) status: ON, OFF
        'mode': None,          # (RW) ON, OFF, AUTO
        'auto': {
            'inside': None,    # (RW) above this temperature, BYPASS is ON ( Tinside > )
            'outside': None,   # (RW) above this temperature, BYPASS is ON ( Toutside > )
        },
    },
    'heater': {
        'mode': None,          # (RW) OFF, ELECTRIC, WATER, FREON_COOLER
        'temp': None,          # (RW) heater target temperature
        'level': None,         # (RO) heater output level
    },
    'speed': {
        'manual': None,        # (RW) speed in manual mode
        'supply': None,        # (RO) supply fan speed
        'extract': None,       # (RO) extract fan speed
    },
    'temp': {
        'outside': None,       # (RO) outside (input) temperature
        'extract': None,       # (RO) extract temperature
        'supply': None,        # (RO) supply temperature
    },
    'reconnected': False,      # just reconnected
}


class ModbusClient(pyModbusTCP.client.ModbusClient):
    def setlogger(self, logger):
        self.l = logger

    def check(self):
        if self.is_open():
            return True

        self.l.info('connecting...')
        if self.open():
            self.l.info('connected')
            state['reconnected'] = True
            return True

        self.l.warning('connect failed')
        return False


class MqttClient(paho.mqtt.client.Client):
    def setlogger(self, logger):
        self.enable_logger(logger)
        self.l = logger

    def publish(self, topic, payload=None, qos=0, retain=True, quiet=False):
        super(MqttClient, self).publish(topic, payload, qos=qos, retain=retain)
        if not quiet:
            self.l.info('> %s = %s', topic, payload)


def terminate(signum, frame):
    sys.exit(0)


def parse_temperature(raw):
    # convert unsigned short to signed
    temp = raw - 65536 if raw > 32767 else raw
    # divide
    return float(temp) / 10.0


def mqtt_connected_cb(mqtt, userdata, flags, rc):
    if rc != 0:
        return

    mqtt.subscribe('msr23/bypass/auto/+/set')
    mqtt.subscribe('msr23/bypass/+/set')
    mqtt.subscribe('msr23/heater/+/set')
    mqtt.subscribe('msr23/+/set')


def mqtt_received_cb(mqtt, userdata, message):
    modbus, lock = userdata
    payload = message.payload
    topic = message.topic

    mqtt.l.info('received %s = %s', topic, payload.decode('utf-8'))

    # enable / disable manual control
    if topic == 'msr23/manual/set' and payload in (b'0FF', b'ON'):
        with lock:
            if modbus.write_single_register(37, 0 if state['manual'] else 2):
                mqtt.publish('msr23/manual', payload.decode('utf-8'))
                state['manual'] = (payload == b'ON')

        return

    # set fan speed
    if topic == 'msr23/speed/set' and \
       payload.replace(b'.', b'', 1).isdigit() and 0 <= int(float(payload)) <= 100:
        speed = int(float(payload))
        with lock:
            if modbus.write_single_register(34, speed):
                mqtt.publish('msr23/speed/manual', str(speed))
                state['speed']['manual'] = speed

        return

    # set bypass mode
    if topic == 'msr23/bypass/mode/set' and payload in (b'OFF', b'ON', b'AUTO'):
        with lock:
            if modbus.write_single_register(12, (b'OFF', b'ON', b'AUTO').index(payload)):
                mqtt.publish('msr23/bypass/mode', payload.decode('utf-8'))
                state['bypass']['mode'] = payload.decode('utf-8')

        return

    # set bypass temperature outside
    if topic == 'msr23/bypass/auto/outside/set' and \
       payload.replace(b'.', b'', 1).isdigit() and 5 <= float(payload) <= 40:
        with lock:
            if modbus.write_single_register(13, int(float(payload))):
                mqtt.publish('msr23/bypass/auto/outside', str(int(float(payload))))
                state['bypass']['auto']['outside'] = int(float(payload))

        return

    # set bypass temperature inside
    if topic == 'msr23/bypass/auto/inside/set' and \
       payload.replace(b'.', b'', 1).isdigit() and 15 <= float(payload) <= 40:
        with lock:
            if modbus.write_single_register(14, int(float(payload))):
                mqtt.publish('msr23/bypass/auto/inside', str(int(float(payload))))
                state['bypass']['auto']['inside'] = int(float(payload))

        return

    # set bypass mode
    if topic == 'msr23/heater/mode/set' and payload in (b'OFF', b'ELECTRIC', b'WATER', b'FREON_COOLER'):
        with lock:
            if modbus.write_single_register(17, (b'OFF', b'ELECTRIC', b'WATER', b'FREON_COOLER').index(payload)):
                mqtt.publish('msr23/heater/mode', payload.decode('utf-8'))
                state['heater']['mode'] = payload.decode('utf-8')

        return

    # set heater (and bypass outside) temperature
    if topic == 'msr23/heater/temp/set' and \
       payload.replace(b'.', b'', 1).isdigit() and 15 <= float(payload) <= 50:
        heater_temp = int(float(payload))

        bypass_temp = heater_temp - TEMP_DIFF
        if bypass_temp < 5:
            bypass_temp = 5
        if bypass_temp > 40:
            bypass_temp = 40

        with lock:
            if modbus.write_single_register(18, heater_temp):
                mqtt.publish('msr23/heater/temp', str(heater_temp))
                state['heater']['temp'] = heater_temp

            if state['bypass']['auto']['outside'] is None or \
               state['bypass']['auto']['outside'] != bypass_temp:
                if modbus.write_single_register(13, bypass_temp):
                    mqtt.publish('msr23/bypass/auto/outside', str(bypass_temp))
                    state['bypass']['auto']['outside'] = bypass_temp

        return


def main():
    # create lock
    lock = threading.Lock()

    # create modbus client
    modbus = ModbusClient()
    modbus.setlogger(logging.getLogger('modbus'))
    modbus.host(MODBUS_HOST)
    modbus.port(MODBUS_PORT)

    # create mqtt client
    mqtt = MqttClient('msr23')
    mqtt.setlogger(logging.getLogger('mqtt'))
    mqtt.on_message = mqtt_received_cb
    mqtt.on_connect = mqtt_connected_cb
    mqtt.user_data_set((modbus, lock))
    mqtt.connect_async(MQTT_HOST, port=MQTT_PORT, keepalive=30)
    mqtt.loop_start()

    temp_report = 0

    while True:
        time.sleep(1)

        with lock:
            if modbus.check():
                data = modbus.read_holding_registers(12, 36)
                if not state['status']:
                    mqtt.publish('msr23/status', 'ONLINE')
                    state['status'] = True
            else:
                if state['status']:
                    mqtt.publish('msr23/status', 'OFFLINE')
                    state['status'] = False
                continue

        if not data:
            continue

        now = time.monotonic()

        # parse modbus registers
        data = [0]*12 + data
        bypass_mode = ('OFF', 'ON', 'AUTO')[data[12]]
        bypass_outside = data[13]
        bypass_inside = data[14]
        heater_mode = ('OFF', 'ELECTRIC', 'WATER', 'FREON_COOLER')[data[17]]
        heater_temp = data[18]
        heater_level = data[21]
        manual_mode = ('ON', None, 'OFF')[data[37]]
        bypass_relay = ('OFF', 'ON')[data[42]]
        speed_manual = data[34]
        speed_supply = data[35]
        speed_extract = data[36]
        temp_outside = parse_temperature(data[44])
        temp_extract = parse_temperature(data[46])
        temp_supply = parse_temperature(data[47])

        # detect device reset / power loss:
        # manual fan speed updated to 29% after successful reconnect
        if state['reconnected'] and \
           state['manual'] is not None and \
           state['manual'] == manual_mode and \
           state['speed']['manual'] is not None and \
           state['speed']['manual'] != 29 and \
           speed_manual == 29:
            # restore manual speed settings
            state['reconnected'] = False
            modbus.l.info('device reset detected')

            speed_manual = state['speed']['manual']
            speed_supply = state['speed']['supply']
            speed_extract = state['speed']['extract']
            modbus.l.info('restoring manual speed %d', speed_manual)
            with lock:
                modbus.write_single_register(34, speed_manual)

            continue

        # reset reconnected state
        state['reconnected'] = False

        # update state values
        if state['bypass']['mode'] != bypass_mode:
            state['bypass']['mode'] = bypass_mode
            mqtt.publish('msr23/bypass/mode', bypass_mode)

        if state['bypass']['auto']['outside'] != bypass_outside:
            state['bypass']['auto']['outside'] = bypass_outside
            mqtt.publish('msr23/bypass/auto/outside', str(bypass_outside))

        if state['bypass']['auto']['inside'] != bypass_inside:
            state['bypass']['auto']['inside'] = bypass_inside
            mqtt.publish('msr23/bypass/auto/inside', str(bypass_inside))

        if state['heater']['mode'] != heater_mode:
            state['heater']['mode'] = heater_mode
            mqtt.publish('msr23/heater/mode', heater_mode)

        if state['heater']['temp'] != heater_temp:
            state['heater']['temp'] = heater_temp
            mqtt.publish('msr23/heater/temp', str(heater_temp))

        if state['heater']['level'] != heater_level:
            state['heater']['level'] = heater_level
            mqtt.publish('msr23/heater/level', str(heater_level))

        if state['manual'] != manual_mode:
            state['manual'] = manual_mode
            mqtt.publish('msr23/manual', manual_mode)

        if state['bypass']['relay'] != bypass_relay:
            state['bypass']['relay'] = bypass_relay
            mqtt.publish('msr23/bypass/relay', bypass_relay)

        if state['speed']['manual'] != speed_manual:
            state['speed']['manual'] = speed_manual
            mqtt.publish('msr23/speed/manual', str(speed_manual))

        if state['speed']['supply'] != speed_supply:
            state['speed']['supply'] = speed_supply
            mqtt.publish('msr23/speed/supply', str(speed_supply))

        if state['speed']['extract'] != speed_extract:
            state['speed']['extract'] = speed_extract
            mqtt.publish('msr23/speed/extract', str(speed_extract))

        if now >= temp_report or abs(temp_outside - state['temp']['outside']) > 0.3:
            state['temp']['outside'] = temp_outside
            mqtt.publish('msr23/temp/outside', str(temp_outside), retain=False, quiet=True)

        if now >= temp_report or abs(temp_extract - state['temp']['extract']) > 0.3:
            state['temp']['extract'] = temp_extract
            mqtt.publish('msr23/temp/extract', str(temp_extract), retain=False, quiet=True)

        if now >= temp_report or abs(temp_supply - state['temp']['supply']) > 0.3:
            state['temp']['supply'] = temp_supply
            mqtt.publish('msr23/temp/supply', str(temp_supply), retain=False, quiet=True)

        if now >= temp_report:
            temp_report = now + 60


if __name__ == '__main__':
    logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                        format='%(asctime)s %(levelname)s [%(name)s] %(message)s')

    if os.getenv('MQTT_HOST') is not None:
        MQTT_HOST = os.getenv('MQTT_HOST')

    if os.getenv('MQTT_PORT') is not None:
        MQTT_PORT = int(os.getenv('MQTT_PORT'))

    if os.getenv('MODBUS_HOST') is not None:
        MODBUS_HOST = os.getenv('MODBUS_HOST')

    if os.getenv('MODBUS_PORT') is not None:
        MODBUS_PORT = int(os.getenv('MODBUS_PORT'))

    if os.getenv('TEMP_DIFF') is not None:
        TEMP_DIFF = int(os.getenv('TEMP_DIFF'))

    if os.getpid() == 1:
        signal.signal(signal.SIGINT, terminate)
        signal.signal(signal.SIGTERM, terminate)
        signal.signal(signal.SIGQUIT, terminate)

    main()
